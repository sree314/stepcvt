#!/usr/bin/env python3
import sys
import json

sys.path.append("../")
from stepcvt.project import Project
from stepcvt.cli import *
import argparse


# load from JSON function
def loadFromJSON(args):
    # check for jsonfile
    if args.jsonfile is None:
        print("ERROR: Need to provide a jsonfile")
        return 1

    # try to get info from jsonfile
    try:
        with open(args.jsonfile, "r") as jf:
            d = json.load(jf)
            p = Project.from_dict(d)
            return p
    except FileNotFoundError as fe:
        print(f"ERROR: {args.jsonfile} doesn't exist")
        return 1
    except json.JSONDecodeError:
        print("ERROR: Invalid json syntax")
        return 1


# write to JSON function
def writeToJSON(p, args):
    with open(args.jsonfile, "w") as jf:
        json.dump(p.to_dict(), jf, indent="  ")
    return 0


if __name__ == "__main__":
    p = argparse.ArgumentParser(description="")
    p.add_argument(
        "-j",
        dest="jsonfile",
        type=str,
        help="Provide the jsonfile",
        default="stepcvt.json",
    )
    sp = p.add_subparsers(dest="command")

    # --- Part ---
    app = sp.add_parser("addpart", help="Add a part")
    # can be no id specified if --all is used
    app.add_argument("id", nargs="*", help="Specify partid for parts to be added")
    app.add_argument(
        "--all",
        action="store_true",
        help="Include this if you want to add all of the parts",
    )
    app.set_defaults(func=part.add_part)

    rpp = sp.add_parser("rmpart", help="Remove a part")
    rpp.add_argument("id", nargs="+", help="Specify partid for parts to be removed")
    rpp.set_defaults(func=part.remove_part)

    epp = sp.add_parser("editpart", help="Change part properties")
    # can only change one part at a time
    epp.add_argument("id", help="Specify partid for the part to be edited")
    epp.add_argument(
        "-c", "--count", type=int, help="Change the default count of the part"
    )
    epp.set_defaults(func=part.edit_part)

    cvtp = sp.add_parser("stlconvert", help="specify how to convert to stl")
    cvtp.add_argument("partID", help="Specify partid for parts to be added")
    cvtp.add_argument(
        "--rotation", type=int, nargs=3, help="3 integers for x, y, z rotation"
    )
    cvtp.add_argument(
        "--linearTolerance", type=float, help="float for linear tolerance"
    )
    cvtp.add_argument(
        "--angularTolerance", type=float, help="float for angular tolerance"
    )
    cvtp.set_defaults(func=task.stlconvert)

    # --- Choices ---
    p_choices = sp.add_parser("choices")
    # nested subparser possible?
    # stepcvt choices add-chooser [--choices-type TYPE] TEXT VARNAME (TEXT:VARNAME[:COND])+
    # example:
    # stepcvt choices add-chooser --choice-type single "Printer Options" "options"
    #   "HEPA filter":"Filter" "Build area lights":"Lights":"version=='V6'"
    subp_choices = p_choices.add_subparsers(help="actions on choices")
    subp_choices_add = subp_choices.add_parser("add-chooser", help="create a choice")
    subp_choices_add.set_defaults(func=choices.choices_add)
    subp_choices_add.add_argument(
        "--choice-type",
        choices=["single", "multi", "boolean"],
        default="single",
        help="chooser type",
    )
    subp_choices_add.add_argument("text")
    subp_choices_add.add_argument("varname")
    subp_choices_add.add_argument(
        "values",
        default=set(),
        nargs="+",
        help="list of potential value and their optional condition, 'text':'value'[:'cond'], "
        "use [sel_value, unsel_value] for boolean chooser",
    )

    # stepcvt choices edit VARNAME [--choice-value TEXT] (TEXT:VARNAME[:COND])+
    # example:
    # stepcvt choices edit "options" --choice-value "Lights" "Build area lights":"Lights":"version=='V4'"
    subp_choices_edit = subp_choices.add_parser(
        "edit", help="replace ChoiceValue(s) of a Chooser"
    )
    subp_choices_edit.set_defaults(func=choices.choices_edit)
    subp_choices_edit.add_argument(
        "varname", help="select specific varname of the Chooser to modify"
    )
    subp_choices_edit.add_argument(
        "--choice-value",
        help="if this is specified, select specific ChoiceValue, otherwise select all ChoiceValue's."
        "For boolean chooser, this value is limited to {select, unselect}.",
    )
    subp_choices_edit.add_argument(
        "new_values",
        nargs="+",
        help="new value(s) to replace the selected ChoiceValue or ChoiceValue list. "
        "Format follows 'text':'value'[:'cond']",
    )

    # stepcvt choices remove VARNAME [--choice-value TEXT] [--cond]
    # example:
    # stepcvt choices remove "options" --choice-value "Lights" --cond
    subp_choices_remove = subp_choices.add_parser(
        "remove", help="remove a chooser or any component in a chooser"
    )
    subp_choices_remove.set_defaults(func=choices.choices_remove)
    subp_choices_remove.add_argument("varname", help="specify which chooser")
    subp_choices_remove.add_argument(
        "--choice-value", help="specify a choice value to in the chooser to be removed"
    )
    subp_choices_remove.add_argument(
        "--cond",
        action="store_true",
        help="remove the condition part of a choice value",
    )

    # stepcvt choices apply (VARNAME=VALUE(,EXTRA_VALUES)*)+
    # example:
    # stepcvt choices apply Version=v6 Options=Lights,Filter
    subp_choices_apply = subp_choices.add_parser("apply", help="apply user choice to ")
    subp_choices_apply.set_defaults(func=choices.choices_apply)
    subp_choices_apply.add_argument(
        "choices_input",
        nargs="+",
        help="List of users choices in the format: varname=value[,extra_values]",
    )
    # TODO: add commands to modify ChoiceEffect?

    # --- Proj ---
    npn = sp.add_parser("newProjName", help="Change a stepcvt Project's name")
    npn.add_argument("name", help="Specify the new name")
    npn.set_defaults(func=proj.newName)

    mnp = sp.add_parser("make", help="Build an exisitng project or new project")
    mnp.add_argument(
        "-n", "--name", type=str, help="Name of project if not default stepcvt.json"
    )
    mnp.set_defaults(func=proj.make)

    dp = sp.add_parser("display", help="Display the contents of a project")
    dp.set_defaults(func=proj.display)

    # CADSource
    # adding step
    add_parser = sp.add_parser("addstep", help="Add a step file")
    add_parser.add_argument("step_name", type=str, help="Name of the step file to add")
    add_parser.add_argument("step_path", type=str, help="Path of the step file to add")
    add_parser.set_defaults(func=source.add_step)

    # removing step
    remove_parser = sp.add_parser("rmstep", help="Remove a step file")
    remove_parser.add_argument(
        "step_path", type=str, help="Name of the step file to remove"
    )
    remove_parser.set_defaults(func=source.remove_step)

    # listing parts
    list_parser = sp.add_parser("liststep", help="List parts of a step file")
    list_parser.add_argument(
        "step_path", type=str, help="Path of the step file to list its parts from"
    )
    list_parser.set_defaults(func=source.list_parts)

    # Dispatch
    args = p.parse_args()
    if args.command == "make":
        writeToJSON(proj.make(args), args)
    else:
        p = loadFromJSON(args)
        if p == 1:
            sys.exit(1)
        save = args.func(p, args)
        if save:
            writeToJSON(p, args)
