#!/usr/bin/env python3
import argparse
from stepcvt.cli import choices

if __name__ == "__main__":
    p = argparse.ArgumentParser(description="Create or modify a stepcvt config file")
    p.add_argument(
        "-j", dest="jsonfile", help="specify the json file containing stepcvt config"
    )
    subparser = p.add_subparsers()

    p_choices = subparser.add_parser("choices")
    # nested subparser possible?
    # stepcvt choices add-chooser --choice-type single "Printer Options" "options"
    #   --values "HEPA filter":"Filter" "Build area lights":"Lights":"version=='V6'"
    subp_choices = p_choices.add_subparsers(help="actions on choices")
    subp_choices_add = subp_choices.add_parser("add-chooser", help="create a choice")
    subp_choices_add.set_defaults(func=choices.choices_add)
    subp_choices_add.add_argument(
        "--choice-type",
        choices=["single", "multi", "boolean"],
        default="single",
        help="chooser type",
    )
    subp_choices_add.add_argument("text")
    subp_choices_add.add_argument("varname")
    subp_choices_add.add_argument(
        "--values",
        default=set(),
        nargs="*",
        help="list of potential value and their optional condition, 'text':'value'[:'cond'], "
        "use [sel_value, unsel_value] for boolean chooser",
    )
    # stepcvt choices edit ...
    subp_choices_edit = subp_choices.add_parser("edit", help="edit a choice")
    subp_choices_edit.set_defaults(func=choices.choices_edit)
    subp_choices_edit.add_argument(
        "varname", help="select specific varname of the Chooser to modify"
    )
    subp_choices_edit.add_argument(
        "--choice-value",
        help="if this is specified, select specific ChoiceValue, otherwise select all ChoiceValue's",
    )
    subp_choices_edit.add_argument(
        "new_value",
        help="new value(s) to replace the selected ChoiceValue or ChoiceValue list",
    )
    # stepcvt choices remove ...
    # stepcvt choices apply ...

    # Other subparsers added here

    # Dispatch
    args = p.parse_args()
    args.func(args)
