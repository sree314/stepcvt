python3 ./scripts/stepcvt -j json.js make
python3 ./scripts/stepcvt -j json.js newProjName test
python3 ./scripts/stepcvt -j json.js display
python3 ./scripts/stepcvt -j json.js addstep stealth_burner_head scripts/Stealthburner_Printhead_V6.stp
python3 ./scripts/stepcvt -j json.js liststep stealth_burner_head
python3 ./scripts/stepcvt -j json.js addpart stealth_burner_head --all",  # adding all the parts to the first source
python3 ./scripts/stepcvt -j json.js stlconvert partID --rotation 0 0 0 --linearTolerance 0.1 --angularTolerance 0.1",  # adding angular/linear tolerances
python3 ./scripts/stepcvt -j json.js exportstl path",  # exporting the stls
python3 ./scripts/stepcvt -j json.js choices add-chooser --type single 'Printer Options' 'options' "
python3 ./scripts/stepcvt -j json.js choices edit 'options' --choice-value 'Lights' "
python3 ./scripts/stepcvt -j json.js choices apply options=Lights,Filter",  # apply a user choice


Making a new project:
    python3 stepcvt -j filename.json make> -n TestProject
Display existing project contents as needed:
    python3 stepcvt -j filename.json display
Rename existing project:
    python3 stepcvt -j filename.json newProjName myProjectExample
Adding a CADSource object to the project:
    python3 stepcvt -j filename.json addstep stepname steppath
Removing an existing CADSource object from a project given its name:
    python3 stepcvt -j filename.json rmstep stepname
Listing parts of a stepfile given its name:
    python3 stepcvt -j filename.json liststep stepname

Adding all parts from a particular stepfile:
    python3 stepcvt -j [jsonfile] addpart [stepname] --all

Adding a single chooser to add an optional feature "Lights" that is only in "V6" and "HEPA Filter"
    stepcvt -j json.js choices add-chooser "Optional Features" "option"
        "Lights":"lights":"'version'=='V6'"
        "HEPA Filter":"filter"

Add choice effect to part to reflect chooser value
    stepcvt -j json.js choices add-effect --partid "light_mount" --type select --cond "'lights' in option"
    stepcvt -j json.js choices add-effect --partid "filter_mount" --type select --cond "'filter' in option"

Providing user choice
    stepcvt -j json.js choices apply option=lights,filter

Prepare to convert to stl:
    python3 stepcvt -j jsonfile stlconvert partid --rotation --linearTolerance --angularTolerance
Specify the part for convertion with partid.
Optionally:
Specify the rotation of the part with 3 integers x y z.
Specify the linearTolerance with a float.
Specify the angularTolerance with a float.
